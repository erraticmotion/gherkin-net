<?xml version="1.0" encoding="utf-8" ?>
<docs>
  <doc name="ReplaceWithSaboteurSummary">
    <summary>
      <para>
        Creates, binds, and returns a <see cref="ISaboteurVerify{T}" /> Test Double.
      </para>
    </summary>
    <typeparam name="T">
      The type of interface to create a saboteur for.
    </typeparam>
    <typeparam name="TException">
      The type of the exception to raise when the behaviour specified in the <paramref name="expression"/> is met.
    </typeparam>
    <param name="kernel">
      The test fixture kernel container to add the saboteur.
    </param>
    <param name="expression">
      The expression that when met will cause the exception specified by the <typeparamref name="TException"/> to be raised.
    </param>
  </doc>
  <doc name="ReplaceWithSaboteurReturns">
    <returns>
      An object that supports the <see cref="ISaboteurVerify{T}"/> interface.
    </returns>
    <remarks>
      The new binding will replace any existing binding for the <typeparamref name="T"/> type
      within the underlying IoC container.
    </remarks>
  </doc>
  <doc name="ReplaceWithSaboteurExample">
    <example>
      <para>
        The following code fragment demonstrates how to specify a test double saboteur that will raise an exception
        when a method on it's interface is called.
      </para>
      <code language="c#">
        protected override void Bind(IFixtureKernel fixtureKernel)
        {
           fixtureKernel.ReplaceWithSaboteur&lt;IBindable, ArgumentOutOfRangeException&gt;(x => x.MethodImpl());
           var result = fixtureKernel.Get&lt;IBindable&gt;();
           Should.Throw&lt;ArgumentOutOfRangeException&gt;(() => result.MethodImpl());
        }
      </code>
      <para>
        The saboteur is injected into the underlying test fixture IoC container. When an instance of the IBindable
        interface is retrieved from the container, and the IBindable.MethodImpl() method called, the
        ArgumentOutOfRangeException exception is raised.
      </para>
      <para>
        The following code fragment demonstrates how to verify that a test double saboteur has been raised.
      </para>
      <code language="c#">
        protected override void Bind(IFixtureKernel fixtureKernel)
        {
           var verifiable = fixtureKernel.ReplaceWithSaboteur&lt;IBindable, ArgumentOutOfRangeException&gt;(x => x.MethodImpl());
           var result = fixtureKernel.Get&lt;IBindable&gt;();
           try
           {
              // Simulate the sabotuer being called within a client, and the client handling the exception.
              result.MethodImpl();
           }
           catch { }

           // check to ensure the exception was thrown.
           verifiable.Thrown.Should().BeTrue();
        }
      </code>
    </example>
    <seealso cref="Parkeon.Test.Doubles.ISaboteurVerify{T}"/>
  </doc>
</docs>